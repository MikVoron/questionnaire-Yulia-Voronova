document.addEventListener('DOMContentLoaded', () => {
  // –ö–Ω–æ–ø–∫–∞ –ø–µ—á–∞—Ç–∏
  const printButton = document.getElementById("print-button");
  if (printButton) {
    printButton.addEventListener("click", () => window.print());
  }

  // === –°—Ç—Ä–µ—Å—Å ===
  const stressRange = document.getElementById('stress_level');
  const stressDisplay = document.getElementById('valueDisplay');

  const stressStates = {
    1: { text: "üòå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞", color: "#74c69d" },
    2: { text: "üôÇ –ù–∏–∑–∫–∏–π —Å—Ç—Ä–µ—Å—Å", color: "#a5c974" },
    3: { text: "üòê –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å", color: "#f5c542" },
    4: { text: "üòü –í—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å", color: "#f28e2b" },
    5: { text: "üò£ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—Ç—Ä–µ—Å—Å", color: "#e76f51" }
  };

  const updateStress = (value) => {
    const numeric = parseInt(value);
    const percent = ((numeric - parseInt(stressRange.min)) /
                    (parseInt(stressRange.max) - parseInt(stressRange.min))) * 100;

    const state = stressStates[numeric];
    if (state) {
      stressRange.style.background = `linear-gradient(to right, ${state.color} ${percent}%, #ccc ${percent}%)`;
      stressDisplay.textContent = state.text;
      stressDisplay.style.color = state.color;
    }
  };

  if (stressRange && stressDisplay) {
    updateStress(stressRange.value);
    stressRange.addEventListener('input', e => updateStress(e.target.value));
  }

  // === –≠–Ω–µ—Ä–≥–∏—è ===
  const energyRange = document.getElementById('energy_level');
  const energyDisplay = document.getElementById('energyDisplay');

  const energyStates = {
    1: { text: 'üôÅ –ù–∏–∑–∫–∏–π ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥—ã—Ö', color: '#e76f51' },
    2: { text: 'üòï –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–π ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', color: '#f28482' },
    3: { text: 'üòê –°—Ä–µ–¥–Ω–∏–π ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', color: '#f5c542' },
    4: { text: 'üôÇ –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π ‚Äî –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç', color: '#a8dadc' },
    5: { text: 'üòÑ –í—ã—Å–æ–∫–∏–π ‚Äî –≤—ã—Å–æ–∫–∞—è –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', color: '#74c69d' }
  };

 const updateEnergy = (value) => {
  const numericValue = parseInt(value);
  const percent = ((numericValue - parseInt(energyRange.min)) /
                   (parseInt(energyRange.max) - parseInt(energyRange.min))) * 100;

  const state = energyStates[numericValue];
  if (state) {
    // –¶–≤–µ—Ç —Å–ª–∞–π–¥–µ—Ä–∞ ‚Äî –≥—Ä–∞–¥–∏–µ–Ω—Ç
    energyRange.style.background = `linear-gradient(to right, ${state.color} ${percent}%, #ccc ${percent}%)`;

    // –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    energyDisplay.textContent = state.text;
    energyDisplay.style.color = state.color;

    // –ë–µ–∑ —Ñ–æ–Ω–æ–≤, –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–π
    energyDisplay.style.backgroundColor = 'transparent';
  }
};


  if (energyRange && energyDisplay) {
    updateEnergy(energyRange.value);
    energyRange.addEventListener('input', e => updateEnergy(e.target.value));
  }
});

// –°–ª–∞–π–¥–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

document.addEventListener('DOMContentLoaded', () => {
  // === –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ===
  const activityRange = document.getElementById('activity_level');
  const activityDisplay = document.getElementById('activityDisplay');

  const activityStates = {
    1: { text: 'üõå –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π ‚Äî –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', color: '#e76f51' },
    2: { text: 'üö∂‚Äç‚ôÇÔ∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî –Ω–µ–º–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è', color: '#f28482' },
    3: { text: 'üö¥ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∏—Ç–º', color: '#f5c542' },
    4: { text: 'ü§∏‚Äç‚ôÄÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å–ø–æ—Ä—Ç–æ–º', color: '#a8dadc' },
    5: { text: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –í—ã—Å–æ–∫–æ–∞–∫—Ç–∏–≤–Ω—ã–π ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ', color: '#74c69d' }
  };

  const updateActivity = (value) => {
    const numericValue = parseInt(value);
    const percent = ((numericValue - parseInt(activityRange.min)) /
                    (parseInt(activityRange.max) - parseInt(activityRange.min))) * 100;

    const state = activityStates[numericValue];
    if (state) {
      activityRange.style.background = `linear-gradient(to right, ${state.color} ${percent}%, #ccc ${percent}%)`;
      activityDisplay.textContent = state.text;
      activityDisplay.style.color = state.color;
      activityDisplay.style.backgroundColor = 'transparent';
    }
  };

  if (activityRange && activityDisplay) {
    updateActivity(activityRange.value);
    activityRange.addEventListener('input', e => updateActivity(e.target.value));
  }

  // –∑–¥–µ—Å—å –æ—Å—Ç–∞—é—Ç—Å—è –∫–æ–¥ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å—Ç—Ä–µ—Å—Å–∞ ‚Äî —Ç—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –∏—Ö –∏–¥–µ–∞–ª—å–Ω–æ!
});
